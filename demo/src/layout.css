@font-face {
    font-family: 'HKGrotesk Black';
    font-display: optional;
    src:
        url(./fonts/BrandonGrotesque-Black.woff) format('woff'),
        url(./fonts/BrandonGrotesque-Black.woff2) format('woff2');
}

main {
    min-height: 100vh;
}

[data-font-grotesk] {
    font-family: 'HKGrotesk Black' !important;
}

header {
    z-index: var(--z-max);
}

@media (orientation: portrait) {
    section > header {
        flex-direction: column;
    }
}

@media (orientation: landscape) {
    section > header div {
        margin-left: auto;
        max-width: 450px;
    }
}

@media (max-width: 320px) {
    section > header [data-input] {
        grid-template-columns: 1fr;
    }
    section > header [data-input-start],
    section > header [data-input-end] {
        display: none;
    }
}

.autocomp {
    box-shadow: var(--shadow);
    transform: translateY(2px);
    border-radius: 0 var(--border-radius);
}
.autocomp-item {
    background-color: var(--white-100);
}
.dot {
    display: flex;
}

[data-overflow='x']:has(table) {
    height: 390px;
    scroll-padding: 65px;
}

aside {
    padding-bottom: 10vh;
}

.fix-portrait-card-height {
    margin-inline: max(0px, ((100% - 360px) / 2));
}

.fix-unit-width {
    width: 120px;
    gap: var(--gap-2);
    font-weight: 700;
    border-radius: var(--border-radius);
    height: fit-content;
}

[data-group='unit'] {
    width: 120px;
    gap: var(--gap-2);
    font-weight: bold;
    border-radius: var(--border-radius);
    height: fit-content;
}

/* TODO: cute theme switcher */
body:has(option[value='pony']:checked) {
    --font-family: cursive;
    --text-color: #b10267;
    --body-background: #ee458e;
    --main-background: #f4b6d2;
}

/* pre/code */

[class*='highlight-'] {
    border-radius: 3px;
    margin: -3px;
    padding: 3px;
}
.highlight-blue:hover {
    background: #00f;
}
.highlight-orange:hover {
    background: #ffa500;
}
.highlight-green:hover {
    background: #008000;
}

/* ðŸ‘ˆ THIS  before </span> should work*/
/*
<code style="--start: 13;">
	<span class="line">code {</span>
	<span class="line">    counter-reset: step;</span>
	<span class="line">    counter-increment: step calc(var(--start, 1) - 1); </span>
	<span class="line">}</span>
	<span class="line"></span>
	<span class="line">code .line::before {</span>
	<span class="line">    content: counter(step);</span>
	<span class="line">    counter-increment: step;</span>
	<span class="line">    display: inline-block;</span>	
	<span class="line">}</span>
</code>
*/

code {
    counter-reset: step;
    counter-increment: step calc(var(--start, 1) - 1); /* ðŸ‘ˆ THIS */
}

code .line::before {
    content: counter(step);
    counter-increment: step;
    width: 1.5rem;
    padding-right: 0.5rem;
    margin-right: 0.5rem;
    display: inline-block;
    text-align: right;
    color: rgba(115, 138, 148, 0.4);
    border-right: 1px solid currentColor;
}

code {
    padding: 0.3rem 0;
    display: block;
    background: #f6f8fa;
}
code .line {
    display: block;
}
